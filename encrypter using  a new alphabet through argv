#include <cs50.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char upper_letters[] = {'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
                        'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'};
char lower_letters[] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
                        'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};

string change_alphabet(string text);
int encrypt(string text, string key1, string key2);
int main(int argc, string argv[])
{
    // check if no argv[1] and print a message to user letting them know correct format
    if (argc < 2)
    {
        printf("Usage: ./caesar key\n");
        return 1;
    }
    // message to user letting them know their key is incorrect size
    if (strlen(argv[1]) < 26 || strlen(argv[1]) > 26)
    {
        printf("Key must contain 26 characters.\n");
        return 1;
    }
    // a way to check for duplicate characters with nested loop in given key
    for (int i = 0; i < strlen(argv[1]); i++)
    {
        int duplicate_char = 0;
        for (int j = i + 1; j < strlen(argv[1]); j++)
        {
            if (argv[1][i] == argv[1][j])
            {
                duplicate_char = 1;
                break;
            }
        }
        if (duplicate_char)
        {
            printf("Duplicate character found: %c\n", argv[1][i]);
            return 1;
        }
    }
    // check for 1 argument and check if argv[1] is the correct length
    if (argc == 2 && strlen(argv[1]) == 26)
    {
        // check if args[1] has only letters
        for (int i = 0; i < strlen(argv[1]); i++)
        {
            if (isalpha(argv[1][i]))
            {
                continue;
            }
            else
            {
                printf("Key must only contain alphabetic characters.\n");
                return 1;
            }
        }
        string encryption_key = argv[1];
        // create a new a alphabet key to use
        change_alphabet(encryption_key);
        ;
        // prompt user for a string with plaintext message
        string plaintext = get_string("plaintext: ");
        // print encrypted ciphertext based on users plaintext
        encrypt(plaintext, upper_letters, lower_letters);
    }
    // print error message if nothing above works
    else
    {
        printf("Usage: ./caesar key\n");
        return 1;
    }
}
// change our alphabet arrays with the 26 letter encryption that we get, no matter what case the
// letters are in
string change_alphabet(string text)
{
    for (int i = 0, n = strlen(text); i < n; i++)
    {
        // check for uppercase chars
        if (isupper(text[i]))
        {
            upper_letters[i] = text[i];
            lower_letters[i] = text[i] + 32;
        }
        // check for lowercase chars
        if (islower(text[i]))
        {
            lower_letters[i] = text[i];
            upper_letters[i] = text[i] - 32;
        }
    }
    return 0;
}
// change an inputed plaintext to encryption text with our new encryption alphabet
int encrypt(string text, string key1, string key2)
{
    string ciphertext = text;
    int letter_index = 0;
    for (int i = 0, n = strlen(text); i < n; i++)
    {
        // check for uppercase chars
        if (isupper(text[i]))
        {
            letter_index = text[i] - 65;
            ciphertext[i] = text[i];
            ciphertext[i] = upper_letters[letter_index];
        }
        // check for lowercase chars
        else if (islower(text[i]))
        {
            letter_index = text[i] - 97;
            ciphertext[i] = text[i];
            ciphertext[i] = lower_letters[letter_index];
        }
    }
    return printf("ciphertext: %s\n", ciphertext);
}
